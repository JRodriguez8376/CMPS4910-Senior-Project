{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\avalencia17\\\\Documents\\\\GitHub\\\\CMPS4910-Senior-Project\\\\contact-tracing-app\\\\navigation\\\\stackNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport SignedInNavigator from \"./tabNavigator\";\nimport LoginScreen from \"../screens/loginScreen\";\nimport RegisterScreen from \"../screens/registerScreen\";\nimport LoadingScreen from \"../screens/loadingScreen\";\nimport AuthContext from \"../context/authContext\";\nimport { saveUnsecured } from \"../components/tokenAsync\";\nimport { api } from \"../api/constants\";\nimport { getPostAPIData } from \"../api/helpers\";\nvar savedID = {};\nvar accessToken = {};\nvar Stack = createStackNavigator();\n\nvar Navigation = function Navigation() {\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 3:\n              userToken = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 8:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                getPostAPIData('/api/auth/login', data).then(function (result) {\n                  if (result != null) {\n                    saveUnsecured('token', result.accessToken);\n                    saveUnsecured('id', data.id);\n                    accessToken = result.accessToken;\n                    dispatch({\n                      type: 'SIGN_IN',\n                      token: accessToken\n                    });\n                  } else {\n                    dispatch({\n                      type: 'SIGN_IN',\n                      token: null\n                    });\n                  }\n                }).catch(function (error) {\n                  console.error('Login error: ', error);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                getPostAPIData('/api/auth/signup', data).then(function (result) {\n                  saveUnsecured('token', result.accessToken);\n                  saveUnsecured('id', data.id);\n                  accessToken = result.accessToken;\n                  dispatch({\n                    type: 'SIGN_IN',\n                    token: accessToken\n                  });\n                }).catch(function (error) {\n                  console.error('Sign Up error: ', error);\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: '#ff0000'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, state.isLoading ? React.createElement(Stack.Screen, {\n    name: \"LoadingScreen\",\n    component: LoadingScreen,\n    options: {\n      title: 'My home'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 29\n    }\n  }) : state.userToken == null ? React.createElement(React.Fragment, null, React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Register\",\n    component: RegisterScreen,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 29\n    }\n  })) : React.createElement(Stack.Screen, {\n    name: \"SignedIn\",\n    component: SignedInNavigator,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  }))));\n};\n\nexport default Navigation;","map":{"version":3,"sources":["C:/Users/avalencia17/Documents/GitHub/CMPS4910-Senior-Project/contact-tracing-app/navigation/stackNavigator.js"],"names":["NavigationContainer","createStackNavigator","React","AsyncStorage","SignedInNavigator","LoginScreen","RegisterScreen","LoadingScreen","AuthContext","saveUnsecured","api","getPostAPIData","savedID","accessToken","Stack","Navigation","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","useEffect","bootstrapAsync","getItem","authContext","useMemo","signIn","data","then","result","id","catch","error","console","signOut","signUp","headerStyle","backgroundColor","title","headerShown"],"mappings":"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","sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport * as React from 'react';\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport SignedInNavigator from './tabNavigator';\r\nimport LoginScreen from '../screens/loginScreen';\r\nimport RegisterScreen from '../screens/registerScreen';\r\nimport LoadingScreen from '../screens/loadingScreen';\r\n\r\nimport AuthContext from '../context/authContext';\r\n\r\nimport { saveUnsecured } from '../components/tokenAsync';\r\nimport { api } from '../api/constants';\r\nimport { getPostAPIData } from '../api/helpers';\r\n\r\nlet savedID = {};\r\nlet accessToken = {};\r\nconst Stack = createStackNavigator();\r\nconst Navigation = () => {\r\n    const [state, dispatch] = React.useReducer(\r\n        (prevState, action) => {\r\n            switch (action.type) {\r\n                case 'RESTORE_TOKEN':\r\n                    return {\r\n                        ...prevState,\r\n                        userToken: action.token,\r\n                        isLoading: false,\r\n                    };\r\n                case 'SIGN_IN':\r\n                    return {\r\n                        ...prevState,\r\n                        isSignout: false,\r\n                        userToken: action.token,\r\n                    };\r\n                case 'SIGN_OUT':\r\n                    return {\r\n                        ...prevState,\r\n                        isSignout: true,\r\n                        userToken: null,\r\n                    };\r\n            }\r\n        },\r\n        {\r\n            isLoading: true,\r\n            isSignout: false,\r\n            userToken: null,\r\n        }\r\n    );\r\n    React.useEffect(() => {\r\n\r\n        const bootstrapAsync = async () => {\r\n            let userToken;\r\n            try {\r\n                userToken = await AsyncStorage.getItem('userToken');\r\n\r\n            } catch (e) {\r\n                //restore failed token later once I know what I am doing fully\r\n            }\r\n            //Validate token here\r\n            dispatch({ type: 'RESTORE_TOKEN', token: userToken });\r\n        };\r\n        bootstrapAsync();\r\n\r\n    }, []);\r\n    const authContext = React.useMemo(\r\n        () => (\r\n            {\r\n                signIn: async data => {\r\n                    //send sign in data here                    \r\n                    getPostAPIData('/api/auth/login', data)\r\n                        .then(result => {\r\n                            //console.log(result);\r\n                            //Save token information for later\r\n                            if (result != null) {\r\n                                saveUnsecured('token', result.accessToken);\r\n                                saveUnsecured('id', data.id);\r\n                                accessToken = result.accessToken;\r\n                                dispatch({ type: 'SIGN_IN', token: accessToken });\r\n                            } else {\r\n                                dispatch({ type: 'SIGN_IN', token: null });\r\n                            }\r\n                            \r\n                        }).catch((error) => {\r\n                            console.error('Login error: ', error);\r\n                        });\r\n                },\r\n                //TO DO: Sign out relinquishes token\r\n                signOut: () => dispatch({ type: 'SIGN_OUT' }),\r\n                // TO DO: Sign up creates new token\r\n                signUp: async data => {\r\n                    getPostAPIData('/api/auth/signup', data)\r\n                        .then(result => {\r\n                            //console.log(result);\r\n                            //Save token information for later\r\n                            //if (result != null) {\r\n                                saveUnsecured('token', result.accessToken);\r\n                                saveUnsecured('id', data.id);\r\n                                accessToken = result.accessToken;\r\n                                dispatch({ type: 'SIGN_IN', token: accessToken });\r\n                            //} else {\r\n                            //    dispatch({ type: 'SIGN_IN', token: null });\r\n                            //}\r\n                        \r\n                        }).catch((error) => {\r\n                            console.error('Sign Up error: ', error);\r\n                        });\r\n                        \r\n                    //dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\r\n                },\r\n            }),\r\n        []\r\n    );\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContext}>\r\n            <NavigationContainer>\r\n                <Stack.Navigator\r\n                    screenOptions={{\r\n                        headerStyle: {\r\n                            backgroundColor: '#ff0000',\r\n                        },\r\n                        //headerTintColor: '#fff',\r\n                    }}\r\n                >\r\n                    {\r\n                        state.isLoading ? (\r\n                            <Stack.Screen\r\n                                name=\"LoadingScreen\"\r\n                                component={LoadingScreen}\r\n                                options={{ \r\n                                    title: 'My home' \r\n                                }}\r\n                            />\r\n                        ) : state.userToken == null ? (\r\n                            // No authenticated token\r\n                            <>\r\n                            <Stack.Screen\r\n                                name=\"Login\"\r\n                                component={LoginScreen}\r\n                                options={{\r\n                                    headerShown: false\r\n                                }}\r\n                            />\r\n                            <Stack.Screen\r\n                                name=\"Register\"\r\n                                component={RegisterScreen}\r\n                                options={{\r\n                                    headerShown: false\r\n                                }}\r\n                            />\r\n\r\n                            </>\r\n                        ) : (\r\n                                    <Stack.Screen\r\n                                        name=\"SignedIn\"\r\n                                        component={SignedInNavigator}\r\n                                        options={{\r\n                                            headerShown: false\r\n                                        }}\r\n                                    />\r\n                                )\r\n                    }\r\n                </Stack.Navigator>\r\n            </NavigationContainer>\r\n        </AuthContext.Provider>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}