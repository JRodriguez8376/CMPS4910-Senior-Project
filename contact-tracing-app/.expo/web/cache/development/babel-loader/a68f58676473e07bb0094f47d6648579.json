{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\avalencia17\\\\Documents\\\\GitHub\\\\CMPS4910-Senior-Project\\\\contact-tracing-app\\\\screens\\\\testScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./styles/testScreen.style.js\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { FlatList, State } from 'react-native-gesture-handler';\n\nvar TestScreen = function TestScreen() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    fetch('http://localhost:3000/test/users').then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      console.log('JSON here we go babey: ');\n      console.log(json);\n      setData(json);\n    }).catch(function (error) {\n      console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Test Placeholder\"), isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 26\n    }\n  }) : React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(_ref, index) {\n      var device_id = _ref.device_id;\n      return device_id.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }\n      }, \"User ID: \", item.device_id, \", Device Type: \", item.user_type);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default TestScreen;","map":{"version":3,"sources":["C:/Users/avalencia17/Documents/GitHub/CMPS4910-Senior-Project/contact-tracing-app/screens/testScreen.js"],"names":["React","useState","useEffect","styles","FlatList","State","TestScreen","isLoading","setLoading","data","setData","fetch","then","response","json","console","log","catch","error","finally","flex","justifyContent","alignItems","index","device_id","toString","item","user_type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP;;;;;;;;;AAWA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,8BAAhC;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,kBACWL,QAAQ,CAAC,IAAD,CADnB;AAAA;AAAA,MACdM,SADc;AAAA,MACHC,UADG;;AAAA,mBAEGP,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAEdQ,IAFc;AAAA,MAERC,OAFQ;;AAGrBR,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,KAAK,CAAC,kCAAD,CAAL,CACKC,IADL,CACU,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADV,EAEKF,IAFL,CAEU,UAACE,IAAD,EAAU;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,OAAO,CAACI,IAAD,CAAP;AACH,KANL,EAOKG,KAPL,CAOW,UAACC,KAAD,EAAW;AACdH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACH,KATL,EAUKC,OAVL,CAUa;AAAA,aAAMX,UAAU,CAAC,KAAD,CAAhB;AAAA,KAVb;AAWH,GAZQ,EAYN,EAZM,CAAT;AAcA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEY,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,cAAc,EAAE,QAA3B;AAAqCC,MAAAA,UAAU,EAAE;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAIKf,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACN,oBAAC,QAAD;AACI,IAAA,IAAI,EAAEE,IADV;AAEI,IAAA,YAAY,EAAE,4BAAgBc,KAAhB;AAAA,UAAGC,SAAH,QAAGA,SAAH;AAAA,aAA0BA,SAAS,CAACC,QAAV,EAA1B;AAAA,KAFlB;AAGI,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,SAAGA,IAAH;AAAA,aACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBA,IAAI,CAACF,SAArB,qBAA+CE,IAAI,CAACC,SAApD,CADQ;AAAA,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CADJ;AAkBH,CAnCD;;AAoCA,eAAerB,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './styles/testScreen.style.js';\r\nimport {\r\n    Text,\r\n    View,\r\n    StyleSheet,\r\n    TextInput,\r\n    ImageBackground,\r\n    TouchableOpacity,\r\n    Image,\r\n    ActivityIndicator\r\n} from 'react-native';\r\nimport { FlatList, State } from 'react-native-gesture-handler';\r\n//Fetch Requests\r\n// Example code from: https://reactnative.dev/docs/network\r\n//Just testing fetching data from my Node server\r\nconst TestScreen = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetch('http://localhost:3000/test/users')\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                console.log('JSON here we go babey: ');\r\n                console.log(json);\r\n                setData(json);\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n            .finally(() => setLoading(false));\r\n    }, []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n            <Text >\r\n                Test Placeholder\r\n            </Text>\r\n            {isLoading ? <ActivityIndicator /> : (\r\n                <FlatList\r\n                    data={data}\r\n                    keyExtractor={({ device_id }, index) => device_id.toString()}\r\n                    renderItem={({ item }) => (\r\n                        <Text>User ID: {item.device_id}, Device Type: {item.user_type}</Text>\r\n                    )}\r\n                />\r\n            )}\r\n        </View>\r\n\r\n    );\r\n\r\n}\r\nexport default TestScreen;"]},"metadata":{},"sourceType":"module"}