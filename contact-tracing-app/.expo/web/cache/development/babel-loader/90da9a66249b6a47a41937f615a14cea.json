{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Documents\\\\GitHub\\\\CMPS4910-Senior-Project\\\\contact-tracing-app\\\\navigation\\\\stackNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport SignedInNavigator from \"./tabNavigator\";\nimport LoginScreen from \"../screens/loginScreen\";\nimport LoadingScreen from \"../screens/loadingScreen\";\nimport AuthContext from \"../context/authContext\";\nimport saveTokenAsync from \"../components/saveTokenAsync\";\nvar savedID = {};\nvar accessToken = {};\nvar Stack = createStackNavigator();\n\nvar Navigation = function Navigation() {\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 3:\n              userToken = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 8:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                savedID = data.id;\n                fetch('http://localhost:3000/api/auth/login', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(data)\n                }).then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  saveTokenAsync(data.accessToken);\n                  accessToken = data.accessToken;\n                  console.log(\"Success: \", data);\n                }).catch(function (error) {\n                  console.error('Error: ', error);\n                });\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: accessToken\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, React.createElement(Stack.Navigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, state.isLoading ? React.createElement(Stack.Screen, {\n    name: \"LoadingScreen\",\n    component: LoadingScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }) : state.userToken == null ? React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }) : React.createElement(Stack.Screen, {\n    name: \"SignedIn\",\n    component: SignedInNavigator,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }\n  }))));\n};\n\nexport default Navigation;","map":{"version":3,"sources":["D:/Documents/GitHub/CMPS4910-Senior-Project/contact-tracing-app/navigation/stackNavigator.js"],"names":["NavigationContainer","createStackNavigator","React","AsyncStorage","SignedInNavigator","LoginScreen","LoadingScreen","AuthContext","saveTokenAsync","savedID","accessToken","Stack","Navigation","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","useEffect","bootstrapAsync","getItem","authContext","useMemo","signIn","data","id","fetch","method","headers","body","JSON","stringify","then","response","json","console","log","catch","error","signOut","signUp","headerShown"],"mappings":"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","sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport * as React from 'react';\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport SignedInNavigator from './tabNavigator';\r\nimport LoginScreen from '../screens/loginScreen';\r\nimport LoadingScreen from '../screens/loadingScreen';\r\n\r\nimport AuthContext from '../context/authContext';\r\n\r\nimport saveTokenAsync from '../components/saveTokenAsync';\r\nlet savedID = {};\r\nlet accessToken = {};\r\nconst Stack = createStackNavigator();\r\nconst Navigation = () => {\r\n    const [state, dispatch] = React.useReducer(\r\n        (prevState, action) => {\r\n            switch (action.type) {\r\n                case 'RESTORE_TOKEN':\r\n                    return {\r\n                        ...prevState,\r\n                        userToken: action.token,\r\n                        isLoading: false,\r\n                    };\r\n                case 'SIGN_IN':\r\n                    return {\r\n                        ...prevState,\r\n                        isSignout: false,\r\n                        userToken: action.token,\r\n                    };\r\n                case 'SIGN_OUT':\r\n                    return {\r\n                        ...prevState,\r\n                        isSignout: true,\r\n                        userToken: null,\r\n                    };\r\n            }\r\n        },\r\n        {\r\n            isLoading: true,\r\n            isSignout: false,\r\n            userToken: null,\r\n        }\r\n    );\r\n    React.useEffect(() => {\r\n\r\n        const bootstrapAsync = async () => {\r\n            let userToken;\r\n            try {\r\n                userToken = await AsyncStorage.getItem('userToken');\r\n\r\n            } catch (e) {\r\n                //restore failed token later once I know what I am doing fully\r\n            }\r\n            //Validate token here\r\n            dispatch({ type: 'RESTORE_TOKEN', token: userToken });\r\n        };\r\n        bootstrapAsync();\r\n\r\n    }, []);\r\n    const authContext = React.useMemo(\r\n        () => (\r\n\r\n            {\r\n\r\n                signIn: async data => {\r\n                    //send sign in data here\r\n                    savedID = data.id\r\n\r\n                    fetch('http://localhost:3000/api/auth/login', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(data),\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                            saveTokenAsync(data.accessToken);\r\n                            accessToken = data.accessToken;\r\n                            console.log(\"Success: \", data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error: ', error);\r\n                        });\r\n                    dispatch({ type: 'SIGN_IN', token: accessToken });\r\n                },\r\n                signOut: () => dispatch({ type: 'SIGN_OUT' }),\r\n                signUp: async data => {\r\n                    dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\r\n                },\r\n            }),\r\n        []\r\n    );\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContext}>\r\n            <NavigationContainer>\r\n                <Stack.Navigator>\r\n                    {\r\n                        state.isLoading ? (\r\n                            <Stack.Screen\r\n                                name=\"LoadingScreen\"\r\n                                component={LoadingScreen}\r\n                            />\r\n                        ) : state.userToken == null ? (\r\n                            // No authenticated token\r\n                            <Stack.Screen\r\n                                name=\"Login\"\r\n                                component={LoginScreen}\r\n                                options={{\r\n                                    headerShown: false\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                                    <Stack.Screen\r\n                                        name=\"SignedIn\"\r\n                                        component={SignedInNavigator}\r\n                                        options={{\r\n                                            headerShown: false\r\n                                        }}\r\n                                    />\r\n                                )\r\n                    }\r\n                </Stack.Navigator>\r\n            </NavigationContainer>\r\n        </AuthContext.Provider>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}