{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\avalencia17\\\\Documents\\\\GitHub\\\\CMPS4910-Senior-Project\\\\contact-tracing-app\\\\screens\\\\testScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./styles/testScreen.style.js\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { fetchTestData } from \"../api/helpers\";\nimport { FlatList, State } from 'react-native-gesture-handler';\n\nvar TestScreen = function TestScreen() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    fetchTestData().then(function (result) {\n      console.log(result);\n      setData(result);\n    }).then(function () {\n      setLoading(false);\n    });\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Test Placeholder\"), isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 26\n    }\n  }) : React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(_ref, index) {\n      var device_id = _ref.device_id;\n      return device_id.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }\n      }, \"User ID: \", item.device_id, \", Device Type: \", item.user_type);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default TestScreen;","map":{"version":3,"sources":["C:/Users/avalencia17/Documents/GitHub/CMPS4910-Senior-Project/contact-tracing-app/screens/testScreen.js"],"names":["React","useState","useEffect","styles","fetchTestData","FlatList","State","TestScreen","isLoading","setLoading","data","setData","then","result","console","log","flex","justifyContent","alignItems","index","device_id","toString","item","user_type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP;;;;AAMA,SAASC,aAAT;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,8BAAhC;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,kBACWN,QAAQ,CAAC,IAAD,CADnB;AAAA;AAAA,MACdO,SADc;AAAA,MACHC,UADG;;AAAA,mBAEGR,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAEdS,IAFc;AAAA,MAERC,OAFQ;;AAGrBT,EAAAA,SAAS,CAAC,YAAM;AACZE,IAAAA,aAAa,GACRQ,IADL,CACU,UAAAC,MAAM,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAF,MAAAA,OAAO,CAACE,MAAD,CAAP;AACH,KAJL,EAIOD,IAJP,CAIY,YAAM;AACVH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KANL;AAOH,GARQ,EAQN,EARM,CAAT;AAUA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEO,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,cAAc,EAAE,QAA3B;AAAqCC,MAAAA,UAAU,EAAE;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAIKV,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACN,oBAAC,QAAD;AACI,IAAA,IAAI,EAAEE,IADV;AAEI,IAAA,YAAY,EAAE,4BAAgBS,KAAhB;AAAA,UAAGC,SAAH,QAAGA,SAAH;AAAA,aAA0BA,SAAS,CAACC,QAAV,EAA1B;AAAA,KAFlB;AAGI,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,SAAGA,IAAH;AAAA,aACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBA,IAAI,CAACF,SAArB,qBAA+CE,IAAI,CAACC,SAApD,CADQ;AAAA,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CADJ;AAkBH,CA/BD;;AAgCA,eAAehB,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './styles/testScreen.style.js';\r\nimport {\r\n    Text,\r\n    View,\r\n    ActivityIndicator\r\n} from 'react-native';\r\nimport { fetchTestData } from '../api/helpers';\r\nimport { FlatList, State } from 'react-native-gesture-handler';\r\n//Fetch Requests\r\n// Example code from: https://reactnative.dev/docs/network\r\n//Just testing fetching data from my Node server\r\nconst TestScreen = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetchTestData()\r\n            .then(result => {\r\n                console.log(result)\r\n                setData(result);\r\n            }).then(() => {\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n            <Text >\r\n                Test Placeholder\r\n            </Text>\r\n            {isLoading ? <ActivityIndicator /> : (\r\n                <FlatList\r\n                    data={data}\r\n                    keyExtractor={({ device_id }, index) => device_id.toString()}\r\n                    renderItem={({ item }) => (\r\n                        <Text>User ID: {item.device_id}, Device Type: {item.user_type}</Text>\r\n                    )}\r\n                />\r\n            )}\r\n        </View>\r\n\r\n    );\r\n\r\n}\r\nexport default TestScreen;"]},"metadata":{},"sourceType":"module"}